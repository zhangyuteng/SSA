# -*- coding: utf-8 -*-import osimport sysimport timeimport configif sys.platform == "win32":    # On Windows, the best timer is time.clock()    default_timer = time.clockelse:    # On most other platforms the best timer is time.time()    default_timer = time.timedef cpu_count():    '''    Returns the number of CPUs in the system    '''    if sys.platform == 'win32':        try:            num = int(os.environ['NUMBER_OF_PROCESSORS'])        except (ValueError, KeyError):            num = 0    elif 'bsd' in sys.platform or sys.platform == 'darwin':        comm = '/sbin/sysctl -n hw.ncpu'        if sys.platform == 'darwin':            comm = '/usr' + comm        try:            with os.popen(comm) as p:                num = int(p.read())        except ValueError:            num = 0    else:        try:            num = os.sysconf('SC_NPROCESSORS_ONLN')        except (ValueError, OSError, AttributeError):            num = 0    if num >= 1:        return num    else:        raise NotImplementedError('cannot determine number of cpus')class OutputSaver(object):    def __init__(self, filepath, filename):        self.filepath = filepath        self.file = {}        if filename:            self.file[filename] = self.open(filename)    def reserve(self, filename):        if filename not in self.file:            self.file[filename] = self.open(filename)    def write(self, data, filename):        self.reserve(filename)        self.file[filename].write(data)    def close(self):        if self.file:            for i in self.file.items():                i[1].close()    def open(self, filename):        return open(self.filepath + '/' + filename, 'w')def files_from(path):    for f in os.listdir(path):        if os.path.isfile('{}/{}'.format(path,f)):            yield fdef pages_from(input):    '''    每次返回一个doc    :param input:    :return:    '''    id = None    url = None    title = None    in_text = False    text = []    for line in input:        line = line.decode('utf-8').encode('utf-8')        if in_text:            if line == '</doc>\n' or line == '</doc>\r\n' or line == '</doc>':                in_text = False                all_text = ''.join(text)                del text                yield [id, title, url, all_text]                del all_text                text = []            else:                # 去处html标签                text.append(line)        else:            m = config.docRE.search(line)            if m:                title = m.group(3)                id = m.group(1)                url = m.group(2)                in_text = Truedef normalize(text):    '''    处理文本，去掉一些不规则的字符    :param text:    :return:    '''    text[0] = text[0].replace('&quot;', '"')    text[0] = text[0].replace('&#039;', '\'')    text[0] = text[0].replace('&amp;', '&')def checkNorm(text):    '''    检查ErrorToken中在text中出现的字符    :param text:    :return:    '''    tag = []    for token in config.ErrorToken:        if token in text[0]:            tag.append(token)    return tag